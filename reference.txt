using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using MovieAPIDemo.Data;
using MovieAPIDemo.Entities;
using MovieAPIDemo.Models;

namespace MovieAPIDemo.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class MovieController : ControllerBase
    {
        private readonly MovieDbContext _context;
        public MovieController(MovieDbContext context)
        {
            this._context = context;
        }

        [HttpGet]
        public IActionResult Get(int pageIndex = 0, int pageSize=10)
        {
            BaseResponseModel response = new BaseResponseModel();
            try
            {
                var movieCount = _context.Movie.Count();
                var movieList = _context.Movie.Include(x=>x.Actors).Skip(pageIndex*pageSize).Take(pageSize).ToList();
                response.Status = true;
                response.Message = "Success";
                response.Data = new { movieList, movieCount };

                return Ok(response);
            }
            catch (Exception ex)
            {

                response.Status = false;
                response.Message = "Something went wrong";
                return BadRequest(response);
            }
        }

        [HttpGet("{id:int}")]
        public IActionResult GetMovieById(int id)
        {
            BaseResponseModel response = new BaseResponseModel();
            try
            {
                
                var movie = _context.Movie.Include(x => x.Actors).Where(x=>x.Id==id).FirstOrDefault();
                if (movie==null)
                {
                    response.Status = false;
                    response.Message = "Record doesn't exist";
                    return BadRequest(response);
                }
                response.Status = true;
                response.Message = "Success";
                response.Data = movie;

                return Ok(response);
            }
            catch (Exception ex)
            {

                response.Status = false;
                response.Message = "Something went wrong";
                return BadRequest(response);
            }
        }
        [HttpPost]
        public IActionResult Post(CreateMovieViewModel model)
        {
            BaseResponseModel response = new BaseResponseModel();
            try
            {
                if (ModelState.IsValid)
                {
                    var actors = _context.Person.Where(x => model.Actors.Contains(x.Id)).ToList();
                    if (actors.Count != model.Actors.Count)
                    {
                        response.Status = false;
                        response.Message = "Invalid Actor assigned";
                        return BadRequest(response);
                    }

                    var postedModel = new Movie
                    {
                        Title = model.Title,
                        ReleaseDate = model.ReleaseDate,
                        Language = model.Language,
                        CoverImage = model.CoverImage,
                        Description = model.Description,
                        Actors = actors,
                    };
                    _context.Movie.Add(postedModel);
                    _context.SaveChanges();
                    response.Status = true;
                    response.Message = "Success";
                    response.Data = postedModel;
                    

                    return Ok(response);
                  
                }
                else
                {
                    response.Status = false;
                    response.Message = "validation failed";
                    response.Data = ModelState;
                    return BadRequest(response);
                }
            }
            catch (Exception ex)
            {

                response.Status = false;
                response.Message = "Something went wrong";
                return BadRequest(response);
            }
        }

        [HttpPut]
        public IActionResult Put(CreateMovieViewModel model)
        {
            BaseResponseModel response = new BaseResponseModel();
            try
            {
                if (ModelState.IsValid)
                {
                    if (model.Id <=0)
                    {
                        response.Status = false;
                        response.Message = "Invalid movie record";
                        return BadRequest(response);
                    }
                    var actors = _context.Person.Where(x => model.Actors.Contains(x.Id)).ToList();
                    if (actors.Count != model.Actors.Count)
                    {
                        response.Status = false;
                        response.Message = "Invalid Actor assigned";
                        return BadRequest(response);
                    }
                    var movieDetails = _context.Movie.Include(x=>x.Actors).Where(x=>x.Id == model.Id).FirstOrDefault();
                    if (movieDetails == null)
                    {
                        response.Status = false;
                        response.Message = "Invalid Actor assigned";
                        return BadRequest(response);
                    }
                    movieDetails.CoverImage = model.CoverImage;
                    movieDetails.Description = model.Description;
                    movieDetails.Title = model.Title;
                    movieDetails.Language = model.Language;
                    movieDetails.ReleaseDate = model.ReleaseDate;
                    //find removed actors
                    var removedActors = movieDetails.Actors.Where(x=> !model.Actors.Contains(x.Id)).ToList();
                    foreach (var actor in removedActors)
                    {
                        movieDetails.Actors.Remove(actor);
                    }
                    var addedActor = actors.Except(movieDetails.Actors).ToList();
                    foreach (var actor in addedActor)
                    {
                        movieDetails.Actors.Add(actor);
                    }
                    _context.SaveChanges();
                    response.Status = true;
                    response.Message = "Success";
                    response.Data = movieDetails;


                    return Ok(response);

                }
                else
                {
                    response.Status = false;
                    response.Message = "validation failed";
                    response.Data = ModelState;
                    return BadRequest(response);
                }
            }
            catch (Exception ex)
            {

                response.Status = false;
                response.Message = "Something went wrong";
                return BadRequest(response);
            }
        }
    }
}
======================================
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using MovieAPIDemo.Data;
using MovieAPIDemo.Entities;
using MovieAPIDemo.Models;

namespace MovieAPIDemo.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class MovieController : ControllerBase
    {
        private readonly MovieDbContext _context;
        public MovieController(MovieDbContext context)
        {
            this._context = context;
        }

        [HttpGet]
        public IActionResult Get(int pageIndex = 0, int pageSize=10)
        {
            BaseResponseModel response = new BaseResponseModel();
            try
            {
                var movieCount = _context.Movie.Count();
                var movieList = _context.Movie.Include(x=>x.Actors).Skip(pageIndex*pageSize).Take(pageSize).Select(x=>new MovieListViewModel
                {
                    Id = x.Id,
                    Title = x.Title,
                    Actors = x.Actors.Select(y => new ActorViewModel
                    {
                        Id = y.Id,
                        Name = y.Name,
                        DateOfBirth = y.DateOfBirth
                    }).ToList(),
                    CoverImage = x.CoverImage,
                    Language = x.Language,
                    ReleaseDate = x.ReleaseDate,
                }).ToList();
                response.Status = true;
                response.Message = "Success";
                response.Data = new { movieList, movieCount };

                return Ok(response);
            }
            catch (Exception ex)
            {

                response.Status = false;
                response.Message = "Something went wrong";
                return BadRequest(response);
            }
        }

        [HttpGet("{id:int}")]
        public IActionResult GetMovieById(int id)
        {
            BaseResponseModel response = new BaseResponseModel();
            try
            {
                
                var movie = _context.Movie.Include(x => x.Actors).Where(x=>x.Id==id).Select(x => new MovieDetailsViewModel
                {
                    Id = x.Id,
                    Title = x.Title,
                    Actors = x.Actors.Select(y => new ActorViewModel
                    {
                        Id = y.Id,
                        Name = y.Name,
                        DateOfBirth = y.DateOfBirth
                    }).ToList(),
                    CoverImage = x.CoverImage,
                    Language = x.Language,
                    ReleaseDate = x.ReleaseDate,
                    Description = x.Description,
                }).FirstOrDefault();
                if (movie==null)
                {
                    response.Status = false;
                    response.Message = "Record doesn't exist";
                    return BadRequest(response);
                }
                response.Status = true;
                response.Message = "Success";
                response.Data = movie;

                return Ok(response);
            }
            catch (Exception ex)
            {

                response.Status = false;
                response.Message = "Something went wrong";
                return BadRequest(response);
            }
        }
        [HttpPost]
        public IActionResult Post(CreateMovieViewModel model)
        {
            BaseResponseModel response = new BaseResponseModel();
            try
            {
                if (ModelState.IsValid)
                {
                    var actors = _context.Person.Where(x => model.Actors.Contains(x.Id)).ToList();
                    if (actors.Count != model.Actors.Count)
                    {
                        response.Status = false;
                        response.Message = "Invalid Actor assigned";
                        return BadRequest(response);
                    }

                    var postedModel = new Movie
                    {
                        Title = model.Title,
                        ReleaseDate = model.ReleaseDate,
                        Language = model.Language,
                        CoverImage = model.CoverImage,
                        Description = model.Description,
                        Actors = actors,
                    };
                    _context.Movie.Add(postedModel);
                    _context.SaveChanges();

                    var responData = new MovieDetailsViewModel
                    {
                        Id = postedModel.Id,
                        Title = postedModel.Title,
                        Actors = postedModel.Actors.Select(y => new ActorViewModel
                        {
                            Id = y.Id,
                            Name = y.Name,
                            DateOfBirth = y.DateOfBirth
                        }).ToList(),
                        CoverImage = postedModel.CoverImage,
                        Language = postedModel.Language,
                        ReleaseDate = postedModel.ReleaseDate,
                        Description = postedModel.Description,
                    };
                    response.Status = true;
                    response.Message = "Success";
                    response.Data = responData;
                    

                    return Ok(response);
                  
                }
                else
                {
                    response.Status = false;
                    response.Message = "validation failed";
                    response.Data = ModelState;
                    return BadRequest(response);
                }
            }
            catch (Exception ex)
            {

                response.Status = false;
                response.Message = "Something went wrong";
                return BadRequest(response);
            }
        }

        [HttpPut]
        public IActionResult Put(CreateMovieViewModel model)
        {
            BaseResponseModel response = new BaseResponseModel();
            try
            {
                if (ModelState.IsValid)
                {
                    if (model.Id <=0)
                    {
                        response.Status = false;
                        response.Message = "Invalid movie record";
                        return BadRequest(response);
                    }
                    var actors = _context.Person.Where(x => model.Actors.Contains(x.Id)).ToList();
                    if (actors.Count != model.Actors.Count)
                    {
                        response.Status = false;
                        response.Message = "Invalid Actor assigned";
                        return BadRequest(response);
                    }
                    var movieDetails = _context.Movie.Include(x=>x.Actors).Where(x=>x.Id == model.Id).FirstOrDefault();
                    if (movieDetails == null)
                    {
                        response.Status = false;
                        response.Message = "Invalid Actor assigned";
                        return BadRequest(response);
                    }
                    movieDetails.CoverImage = model.CoverImage;
                    movieDetails.Description = model.Description;
                    movieDetails.Title = model.Title;
                    movieDetails.Language = model.Language;
                    movieDetails.ReleaseDate = model.ReleaseDate;
                    //find removed actors
                    var removedActors = movieDetails.Actors.Where(x=> !model.Actors.Contains(x.Id)).ToList();
                    foreach (var actor in removedActors)
                    {
                        movieDetails.Actors.Remove(actor);
                    }
                    var addedActor = actors.Except(movieDetails.Actors).ToList();
                    foreach (var actor in addedActor)
                    {
                        movieDetails.Actors.Add(actor);
                    }
                    _context.SaveChanges();

                    var responData = new MovieDetailsViewModel
                    {
                        Id = movieDetails.Id,
                        Title = movieDetails.Title,
                        Actors = movieDetails.Actors.Select(y => new ActorViewModel
                        {
                            Id = y.Id,
                            Name = y.Name,
                            DateOfBirth = y.DateOfBirth
                        }).ToList(),
                        CoverImage = movieDetails.CoverImage,
                        Language = movieDetails.Language,
                        ReleaseDate = movieDetails.ReleaseDate,
                        Description = movieDetails.Description,
                    };

                    response.Status = true;
                    response.Message = "Success";
                    response.Data = responData;


                    return Ok(response);

                }
                else
                {
                    response.Status = false;
                    response.Message = "validation failed";
                    response.Data = ModelState;
                    return BadRequest(response);
                }
            }
            catch (Exception ex)
            {

                response.Status = false;
                response.Message = "Something went wrong";
                return BadRequest(response);
            }
        }
    }
}
=============================================================================
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using MovieAPIDemo.Data;
using MovieAPIDemo.Entities;
using MovieAPIDemo.Models;

namespace MovieAPIDemo.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class PersonController : ControllerBase
    {
        private readonly MovieDbContext _context;
        public PersonController(MovieDbContext context)
        {
            this._context = context;
        }
        [HttpGet]
        public IActionResult Get(int pageIndex = 0, int pageSize = 10)
        {
            BaseResponseModel response = new BaseResponseModel();
            try
            {
                var actorCount = _context.Person.Count();
                var actorList = _context.Person.Skip(pageIndex * pageSize).Take(pageSize).Select(x => new ActorViewModel
                {
                    Id = x.Id,
                    Name = x.Name,
                    DateOfBirth = x.DateOfBirth,
                }).ToList();
                response.Status = true;
                response.Message = "Success";
                response.Data = new { actorList, actorCount };

                return Ok(response);
            }
            catch (Exception ex)
            {

                response.Status = false;
                response.Message = "Something went wrong";
                return BadRequest(response);
            }
        }

        [HttpGet("{id:int}")]
        public IActionResult GetPersonById(int id)
        {
            BaseResponseModel response = new BaseResponseModel();
            try
            {

                var person = _context.Person.Where(x => x.Id == id).FirstOrDefault();
                if (person == null)
                {
                    response.Status = false;
                    response.Message = "Record doesn't exist";
                    return BadRequest(response);
                }
                var personData = new ActorDetailViewModel
                { 
                    Id = person.Id,
                    Name=person.Name,
                    DateOfBirth = person.DateOfBirth,
                    Movies = _context.Movie.Where(x=>x.Actors.Contains(person)).Select(x=>x.Title).ToArray(),
                };
                response.Status = true;
                response.Message = "Success";
                response.Data = personData;

                return Ok(response);
            }
            catch (Exception ex)
            {

                response.Status = false;
                response.Message = "Something went wrong";
                return BadRequest(response);
            }
        }

        [HttpPost]
        public IActionResult Post(ActorViewModel model)
        {
            BaseResponseModel response = new BaseResponseModel();
            try
            {
                if (ModelState.IsValid)
                {
                    

                    var postedModel = new Person
                    {
                        Name = model.Name,
                        DateOfBirth = model.DateOfBirth,
                    };
                    _context.Person.Add(postedModel);
                    _context.SaveChanges();

                    //once data is posted we'll load id in model and upload it in model to display in viw model
                    model.Id = postedModel.Id;

                    response.Status = true;
                    response.Message = "Success";
                    response.Data = model;


                    return Ok(response);

                }
                else
                {
                    response.Status = false;
                    response.Message = "validation failed";
                    response.Data = ModelState;
                    return BadRequest(response);
                }
            }
            catch (Exception ex)
            {

                response.Status = false;
                response.Message = "Something went wrong";
                return BadRequest(response);
            }
        }
    }
}
================================================